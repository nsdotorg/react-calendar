{"version":3,"sources":["data/fetch.tsx","components/WeekView.tsx","components/Calendar.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["myStore","localforage","createInstance","name","storeName","eventsArray","forEach","event","key","setItem","String","getRows","rows","i","push","CalendarContainer","styled","section","useStyles","makeStyles","root","width","container","maxHeight","tableRow","height","week","moment","add","getPreviousWeek","currentWeek","previousWeek","clone","subtract","getNextWeek","nextWeek","WeekView","useState","setCurrentWeek","setPreviousWeek","setNextWeek","classes","cellRefs","useRef","current","addRefs","el","includes","useEffect","Promise","all","eventsList","length","result","getItem","getData","then","values","cell","startTime","toString","classList","split","date","duration","cellNode","innerHTML","title","columns","label","format","toUpperCase","style","textAlign","color","marginBottom","ButtonGroup","aria-label","Button","variant","onClick","Paper","className","TableContainer","Table","stickyHeader","TableHead","TableRow","map","column","index","TableCell","align","minWidth","backgroundColor","TableBody","row","tabIndex","ref","CalendarWrapper","Calendar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f26b3fc7.chunk.js","sourcesContent":["import localforage from \"localforage\";\nimport eventsArray from \"./data.json\";\n\nexport const myStore = localforage.createInstance({\n  name: \"localdb\",\n  storeName: \"events\",\n});\n\neventsArray.forEach((event, key) => {\n  myStore.setItem(String(key), event);\n});\n\ntype Event = {\n  title: String;\n  date: String;\n  startTime: Number;\n  duration: Number;\n};\n\nexport const fetchDataFromIndexedDB = () => {\n  let eventsList: Promise<Event | null>[] = [];\n  if (eventsArray.length > 0) {\n    eventsArray.forEach((event, key) => {\n      let result: Promise<Event | null> = myStore.getItem(String(key));\n      eventsList.push(result);\n    });\n  }\n  return eventsList;\n};\n\nexport const getRows = () => {\n  const rows = [];\n  for (let i = 0; i < 24; i++) {\n    rows.push(i);\n  }\n  return rows;\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n\nimport { fetchDataFromIndexedDB as getData, getRows } from \"../data/fetch\";\n\nconst CalendarContainer = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 90vw;\n  border-radius: 0;\n  padding: 0;\n  margin: 0;\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  container: {\n    maxHeight: \"80vh\",\n  },\n  tableRow: {\n    height: 100,\n  },\n});\n\nconst week: moment.Moment[] = [];\nfor (let i = 0; i <= 6; i++) {\n  week.push(moment().add(i, \"days\"));\n}\n\nconst getPreviousWeek = (currentWeek: moment.Moment[]) => {\n  const previousWeek = [];\n  for (let i = 0; i <= 6; i++) {\n    previousWeek.push(currentWeek[i].clone().subtract(7, \"days\"));\n  }\n  return previousWeek;\n};\n\nconst getNextWeek = (currentWeek: moment.Moment[]) => {\n  const nextWeek = [];\n  for (let i = 0; i <= 6; i++) {\n    nextWeek.push(currentWeek[i].clone().add(7, \"days\"));\n  }\n  return nextWeek;\n};\n\n// component starts here\nconst WeekView = () => {\n  const [currentWeek, setCurrentWeek] = useState(week);\n  const [previousWeek, setPreviousWeek] = useState(\n    getPreviousWeek(currentWeek)\n  );\n  const [nextWeek, setNextWeek] = useState(getNextWeek(currentWeek));\n\n  const classes = useStyles();\n\n  const previousWeekHandler = () => {\n    cellRefs.current.forEach((el) => {\n      let cellNode = el as HTMLElement;\n      cellNode.innerHTML = \"\";\n    });\n    setPreviousWeek(getPreviousWeek(previousWeek));\n    setCurrentWeek(getPreviousWeek(currentWeek));\n    setNextWeek(currentWeek);\n  };\n\n  const nextWeekHandler = () => {\n    cellRefs.current.forEach((el) => {\n      let cellNode = el as HTMLElement;\n      cellNode.innerHTML = \"\";\n    });\n    setNextWeek(getNextWeek(nextWeek));\n    setCurrentWeek(getNextWeek(currentWeek));\n    setPreviousWeek(currentWeek);\n  };\n\n  const cellRefs = useRef([]);\n  cellRefs.current = [];\n\n  const addRefs = (el: HTMLDivElement): void => {\n    if (el && !cellRefs.current.includes(el as never)) {\n      cellRefs.current.push(el as never);\n    }\n  };\n\n  useEffect(() => {\n    Promise.all(getData()).then((values) => {\n      values.forEach((event) => {\n        cellRefs.current.forEach((cell: HTMLElement) => {\n          if (\n            event !== null &&\n            event.startTime.toString() === cell.classList[1].split(\"c\")[1] &&\n            event.date.toString() === cell.classList[1].split(\"c\")[2]\n          ) {\n            if (event.duration === 30) {\n              let cellNode = cell as HTMLElement;\n              cellNode.innerHTML =\n                cellNode.innerHTML +\n                `<p class=\"event\" style=\"height:50%\">${event.title}<br/>(${event.duration} min)</p>`;\n            } else if (event.duration === 45) {\n              let cellNode = cell as HTMLElement;\n              cellNode.innerHTML =\n                cellNode.innerHTML +\n                `<p class=\"event\" style=\"height:75%\">${event.title}<br/>(${event.duration} min)</p>`;\n            } else if (event.duration === 60) {\n              let cellNode = cell as HTMLElement;\n              cellNode.innerHTML =\n                cellNode.innerHTML +\n                `<p class=\"event\" style=\"height:100%\">${event.title}<br/>(${event.duration} min)</p>`;\n            }\n          }\n        });\n      });\n    });\n  }, [currentWeek, previousWeek, nextWeek]);\n\n  const columns = [\n    {\n      label: (\n        <strong>\n          {currentWeek[0].format(\"MMM\") !== currentWeek[6].format(\"MMM\")\n            ? `${currentWeek[0]\n                .format(\"MMM\")\n                .toUpperCase()} - ${currentWeek[6]\n                .format(\"MMM\")\n                .toUpperCase()} ${currentWeek[0].format(\"YYYY\")}`\n            : currentWeek[0].format(\"MMM YYYY\").toUpperCase()}\n        </strong>\n      ),\n    },\n    {\n      label: `${currentWeek[0].format(\"ddd\")} (${currentWeek[0].format(\"DD\")})`,\n    },\n    {\n      label: `${currentWeek[1].format(\"ddd\")} (${currentWeek[1].format(\"DD\")})`,\n    },\n    {\n      label: `${currentWeek[2].format(\"ddd\")} (${currentWeek[2].format(\"DD\")})`,\n    },\n    {\n      label: `${currentWeek[3].format(\"ddd\")} (${currentWeek[3].format(\"DD\")})`,\n    },\n    {\n      label: `${currentWeek[4].format(\"ddd\")} (${currentWeek[4].format(\"DD\")})`,\n    },\n    {\n      label: `${currentWeek[5].format(\"ddd\")} (${currentWeek[5].format(\"DD\")})`,\n    },\n    {\n      label: `${currentWeek[6].format(\"ddd\")} (${currentWeek[6].format(\"DD\")})`,\n    },\n  ];\n\n  return (\n    <>\n      <CalendarContainer>\n        <h1\n          style={{ textAlign: \"center\", color: \"#fff\", marginBottom: \"1rem\" }}\n        >\n          CALENDAR\n        </h1>\n        <ButtonGroup aria-label=\"outlined primary button group\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={previousWeekHandler}\n          >\n            Previous Week\n          </Button>\n          <Button variant=\"contained\" color=\"primary\" onClick={nextWeekHandler}>\n            Next Week\n          </Button>\n        </ButtonGroup>\n        <Paper className={classes.root}>\n          <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n              <TableHead>\n                <TableRow>\n                  {columns.map((column, index) =>\n                    index === 0 ? (\n                      <TableCell\n                        key={index}\n                        align=\"center\"\n                        style={{\n                          minWidth: 100,\n                          backgroundColor: \"#FFEB3B\",\n                          color: \"#000\",\n                        }}\n                        width=\"10%\"\n                      >\n                        {column.label}\n                      </TableCell>\n                    ) : (\n                      <TableCell\n                        key={index}\n                        align=\"center\"\n                        style={{\n                          minWidth: 100,\n                          backgroundColor: \"#1a73e8\",\n                          color: \"#fff\",\n                        }}\n                        width=\"10%\"\n                      >\n                        {column.label}\n                      </TableCell>\n                    )\n                  )}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {getRows().map((row, index) => (\n                  <TableRow\n                    tabIndex={-1}\n                    key={index}\n                    className={classes.tableRow}\n                  >\n                    {columns.map((column, index) =>\n                      index === 0 ? (\n                        <TableCell style={{ textAlign: \"center\" }} key={index}>\n                          <div className=\"event-cell event-time\">\n                            {row <= 12 ? row + \":00 AM\" : row + \":00 PM\"}\n                          </div>\n                        </TableCell>\n                      ) : (\n                        <TableCell style={{ textAlign: \"center\" }} key={index}>\n                          <div\n                            className={`event-cell c${row}c${currentWeek[\n                              index - 1\n                            ].format(\"YYYY-MM-DD\")}`}\n                            ref={addRefs}\n                          ></div>\n                        </TableCell>\n                      )\n                    )}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      </CalendarContainer>\n    </>\n  );\n};\n\nexport default WeekView;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport WeekView from \"./WeekView\";\n\nconst CalendarWrapper = styled.section`\n  padding: 0;\n  margin: 0;\n  width: 100vw;\n  min-height: 100vh;\n  background: #00a8f4;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Calendar = () => {\n  return (\n    <>\n      <CalendarWrapper>\n        <WeekView />\n      </CalendarWrapper>\n    </>\n  );\n};\n\nexport default Calendar;\n","import Calendar from \"./components/Calendar\";\n\nfunction App() {\n  return <Calendar />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}